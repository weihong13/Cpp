//#include<iostream>
//using namespace std;

//
// 内存分区模型
// 
// C++ 在执行程序时，将内存大方向划分为4个区
// 代码区：存放函数体的二进制代码，由操作系统进行管理
// 全局区：存放全局变量、静态变量和常量
// 栈区：由编译器自动分配释放，存放函数参数（形参），局部变量等
// 堆区： 由程序员分配或释放，若程序员不释放，由操作系统回收
// 
// 
// 程序编译后、运行前
// 代码区：存放CPU执行的机器指令、代码区是共享的、只读的
// 全局区：全局变量、静态变量、常量，该区域数据在程序结束后由操作系统释放
// 
// const 修饰的局部常量 在 栈区
// 
// 程序运行后
// 栈区：形参、局部变量，注意不要返回局部变量的地址，在函数结束调用后，被销毁，属于野指针
// 
// 堆区：程序员管理释放，程序结束后系统回收
//      C++ 使用new开辟内存
//  

//int* func() {
//
//	// new 类型(数量)
//	// 利用 new 一块int类型的空间 存放10；
//	// 返回一个地址
//    return new int(10);
//}
//
//// 使用 new 在堆区开辟内存
//int main() {
//
//	// 在堆区开辟数据
//	int* p = func();
//	cout << *p << endl;
//	cout << *p << endl;
//	cout << *p << endl;
//
//	// 释放空间
//	delete p;
//	// cout << *p << endl; //err
//
//	// 堆区开辟数组
//	// 在堆区开辟一块能够存放 10个 int类型大小的空间
//	// 返回首元素地址
//	int* arr = new int[10];
//	int i = 0;
//	for (i = 0; i < 10; i++) {
//		arr[i] = i + 1;
//	}
//	for (i = 0; i < 10; i++) {
//		cout << arr[i] << endl;
//	}
//	// 释放数组时，要加[],代表释放数组，否则只释放首元素
//	delete[] arr;
//	// cout << arr[1] << endl; //err
//
//
//	system("pause");
//	return 0;
//}

