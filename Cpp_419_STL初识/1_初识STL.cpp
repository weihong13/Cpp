



//
// STL 的诞生
// 1.C++的 面向对象（封装、继承、多态） 和 泛型编程（模板） 的思想，
//		就是为了提升代码的复用性
// 2.而数据结构和算法、都没有一套标准。
// 3.为了建立 数据结构和算法的一套标准，诞生了STL 
// 
// STL 基本概念
// 1.STL(Standard Template Library，标准模板库)
// 2.STL从广义上分为：容器（container）、算法（algorithm）、迭代器（iterator）
// 3.容器（container）和算法（algorithm）直接通过迭代器（iterator）无缝衔接
// 4.STL 几乎所有的代码都采用了模板类或者模板函数
// 
// 
// STL 六大组件
// STL大体分为六大组件：容器、算法、迭代器、仿函数、适配器（配接器）、空间配置器
// 
// 1.容器：各种数据结构，如vector、list、deque、set、map等，用来存放数据
// 2.算法：各种常用的算法，sort(排序)、find(查找)、copy(拷贝)、for_each(遍历)
// 3.迭代器：扮演了容器和算法之间的胶合剂，容器和算法之间交流必须通过迭代器
// 4.仿函数：重载的 ()，行为类似函数，协助算法完成不同的策略变化
// 5.适配器：一种用来修饰容器或者仿函数接口的东西。
//			（容器每次传入一个数据，多个传入时，就需要用到适配器）
// 6.空间配置器：复制空间的配置与管理。（空间的开辟释放操作）
//
// 
// STL 容器、算法、迭代器
// 
// 容器
// 将一些运用最广泛的一些数据结构表现出来
// 常用的数据结构：数组、链表、树、栈、队列、集合、映射表等
// 这个容器分为：序列式容器、关联式容器
// 序列式容器：强调值的排序，序列式容器中的每个元素都有固定的位置
// 关联式容器：二叉树结构，各元素之间没有严格的物理上的顺序关系
// 
// 
// 算法（Algorithms）
// 问题的解决方法
// 算法分为：质变算法、非质变算法
// 质变算法：   指运算过程中会更改区间内的元素的内容。（拷贝、替换、删除等）
// 非质变算法： 指运算过程中不会更改区间内的元素的内容。（查找、计数、遍历、极值等）
// 
// 
// 迭代器
// 算法通过迭代器才能访问容器中的元素（可以不暴露容器内部的表示方式）
// 每个容器都有自己专属的迭代器
// 
// 
// 迭代器种类:
//  种类            功能                                   支持运算
// 输入迭代器         对数据的只读访问                       只读，支持++、==、!=
// 输出迭代器         对数据的只写访问                       只写，支持++
// 前向迭代器         读写操作，并能向前推进迭代器            读写，支持++、 == 、 !=
// 双向迭代器         读写操作，并能向前和向后操作            读写，支持++、…
// 随机访问迭代器     读写操作，可以以跳跃的方式访问任意数据，功能最强的迭代器
//
// 随机访问迭代器 :读写，支持++、 - 、[n]、 - n、<、<= 、>、 >=
//
// 常用的容器中迭代器种类为双向迭代器，和随机访问迭代器
//